import joblib
import logging
import re
import os
from sklearn.neighbors import KNeighborsClassifier
from sklearn.feature_extraction.text import TfidfVectorizer
from colorama import Fore, Style, init

init(autoreset=True)
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π."""
    reviews = [
        "–û—Ç–ª–∏—á–Ω–æ —Å–Ω—è—Ç–æ, —à–∏–∫–∞—Ä–Ω—ã–π —Å—é–∂–µ—Ç",
        "–°–∫—É—á–Ω—ã–π –∏ –Ω—É–¥–Ω—ã–π —Ñ–∏–ª—å–º",
        "–ú–æ–π –ª—é–±–∏–º—ã–π —Ñ–∏–ª—å–º, —Å—É–ø–µ—Ä –∞–∫—Ç—ë—Ä—ã",
        "–£–∂–∞—Å–Ω–æ, –ø–ª–æ—Ö–æ–π —Å—é–∂–µ—Ç",
        "–ö–ª–∞—Å—Å–Ω—ã–π —Ñ–∏–ª—å–º, —à–∏–∫–∞—Ä–Ω–æ —Å—ã–≥—Ä–∞–Ω–æ",
        "–ù—É–¥–Ω—ã–π –∏ —Ç—É–ø–æ–π —Ñ–∏–ª—å–º",
        "–°—É–ø–µ—Ä —Ñ–∏–ª—å–º, –æ—Ç–ª–∏—á–Ω–æ —Å–Ω—è—Ç–æ",
        "–°–∫—É—á–Ω—ã–π –∏ –ø–ª–æ—Ö–æ–π —Ñ–∏–ª—å–º",
        "–§–∏–ª—å–º –æ–±—ã—á–Ω—ã–π, –Ω–∏—á–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ",
        "–°—Ä–µ–¥–Ω–∏–π —Ñ–∏–ª—å–º, –µ—Å—Ç—å –º–æ–º–µ–Ω—Ç—ã"
    ]

    source_labels = [
        "–∑—Ä–∏—Ç–µ–ª—å",
        "–∫—Ä–∏—Ç–∏–∫",
        "–∑—Ä–∏—Ç–µ–ª—å",
        "–∫—Ä–∏—Ç–∏–∫",
        "–∑—Ä–∏—Ç–µ–ª—å",
        "–∫—Ä–∏—Ç–∏–∫",
        "–∑—Ä–∏—Ç–µ–ª—å",
        "–∫—Ä–∏—Ç–∏–∫",
        "–∑—Ä–∏—Ç–µ–ª—å",
        "–∫—Ä–∏—Ç–∏–∫"
    ]

    rating_labels = [
        "10",  
        "3",   
        "9",
        "2",
        "8",
        "4",
        "9",
        "3",
        "5",
        "6"
    ]

    return reviews, source_labels, rating_labels

def train_model(reviews, labels, k=3):
    """–û–±—É—á–∞–µ—Ç KNN –º–æ–¥–µ–ª—å —Å TF-IDF –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π."""
    vectorizer = TfidfVectorizer()
    X = vectorizer.fit_transform(reviews)
    model = KNeighborsClassifier(n_neighbors=k)
    model.fit(X, labels)
    return model, vectorizer

def predict_label(model, vectorizer, review):
    """–î–µ–ª–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""
    cleaned_text = re.sub(r"[^\w\s]", "", review).strip()
    if not cleaned_text:
        logging.error("–û—Ç–∑—ã–≤ –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è")
        return None

    X = vectorizer.transform([cleaned_text])
    prediction = model.predict(X)
    return prediction[0]

def save_model(model, vectorizer, model_path, vectorizer_path):
    joblib.dump(model, model_path)
    joblib.dump(vectorizer, vectorizer_path)

def load_model(model_path, vectorizer_path):
    model = joblib.load(model_path)
    vectorizer = joblib.load(vectorizer_path)
    return model, vectorizer

def main():
    source_model_path = "knn_source_model.joblib"
    source_vectorizer_path = "source_vectorizer.joblib"
    rating_model_path = "knn_rating_model.joblib"
    rating_vectorizer_path = "rating_vectorizer.joblib"

    if os.path.exists(source_model_path) and os.path.exists(source_vectorizer_path):
        logging.info("üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏—Å—Ç–æ—á–Ω–∏–∫–∞...")
        source_model, source_vectorizer = load_model(source_model_path, source_vectorizer_path)
    else:
        logging.info("‚öô –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å –∏—Å—Ç–æ—á–Ω–∏–∫–∞...")
        reviews, source_labels, rating_labels = load_data()
        source_model, source_vectorizer = train_model(reviews, source_labels)
        save_model(source_model, source_vectorizer, source_model_path, source_vectorizer_path)

    if os.path.exists(rating_model_path) and os.path.exists(rating_vectorizer_path):
        logging.info("üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å —Ä–µ–π—Ç–∏–Ω–≥–∞...")
        rating_model, rating_vectorizer = load_model(rating_model_path, rating_vectorizer_path)
    else:
        logging.info("‚öô –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å —Ä–µ–π—Ç–∏–Ω–≥–∞...")
        if 'reviews' not in locals():
            reviews, source_labels, rating_labels = load_data()
        rating_model, rating_vectorizer = train_model(reviews, rating_labels)
        save_model(rating_model, rating_vectorizer, rating_model_path, rating_vectorizer_path)

    while True:
        new_review = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ")
        if new_review.lower() == "exit":
            logging.info("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
            break

        source_pred = predict_label(source_model, source_vectorizer, new_review)
        rating_pred = predict_label(rating_model, rating_vectorizer, new_review)

        if source_pred is None or rating_pred is None:
            print(Fore.YELLOW + "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–º—É –æ—Ç–∑—ã–≤—É" + Style.RESET_ALL)
            continue

        print(f"–û—Ç–∑—ã–≤ –æ—Ç: {source_pred}")
        print(F"–û—Ü–µ–Ω–∫–∞ —Ñ–∏–ª—å–º–∞ –ø–æ 10-–±–∞–ª—å–Ω–æ–π —à–∫–∞–ª–µ: {Fore.CYAN}{rating_pred}{Style.RESET_ALL}")

    logging.info("–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main()
